# Immediate Changes: Iteration 1, Step 1

## ~~Create a requirements.txt and test a clean install~~

### ~~Sub-steps:~~
~~1. List all Python dependencies used in the project (PyQt6, mediapipe, matplotlib, etc.)~~
~~2. Create a requirements.txt file in the root directory~~
~~3. Test installation in a fresh virtual environment:~~
   ~~ - Create a new venv~~
   ~~ - Run `pip install -r requirements.txt`~~
   ~~ - Run `python app/main3.py` to ensure the app starts~~
   ~~ - Run `python tests/integration_test.py` to ensure tests pass~~
~~4. Update README with installation instructions if needed~~

---

## Move all hardcoded values to a config/settings file

### Sub-steps:
1. Identify all hardcoded values, thresholds, and parameters in the codebase (app/).
2. Create a config.py file in app/ and move these values there as constants.
3. Update all code to import and use these config values instead of hardcoded numbers.
4. Ensure robust imports for config in all modules (support both script and package usage).
5. Run all tests and main app to confirm nothing is broken.
6. Update README/Developer Notes to mention config usage and how to change settings.

--------------------------------------------------------------------------------------------

# Immediate Changes: Iteration 1, Step 2

## ~~Add user feedback for missing dependencies (MediaPipe, camera)~~

### ~~Sub-steps:~~
~~1. Audit all imports and initialization for MediaPipe and camera usage in the app (especially posture_detection.py and main3.py).~~
~~2. Add user-friendly error dialogs or console messages if MediaPipe is missing or fails to load.~~
~~3. Add user-friendly error dialogs or console messages if the camera is missing, busy, or fails to initialize.~~
~~4. Ensure all such errors are logged and do not crash the app; provide actionable suggestions to the user.~~
~~5. Test by simulating missing dependencies and camera access issues.~~
~~6. Update README with troubleshooting tips for these errors.~~

--------------------------------------------------------------------------------------------

# Immediate Changes: Iteration 1, Step 3

## ~~Audit and fix any obvious memory leaks in video/posture code~~

### ~~Sub-steps:~~
~~1. Audit all QImage/QPixmap usage for proper creation and release (especially in posture_detection.py and main3.py).~~
~~2. Audit camera resource management: ensure cameras are always released on exit, error, or restart.~~
~~3. Audit frame buffer and posture buffer management for leaks or unbounded growth.~~
~~4. Add/fix cleanup logic in all relevant classes and threads (VideoWorker, PostureDetector, main window, etc.).~~
~~5. Add/expand tests to simulate rapid start/stop and check for resource leaks.~~
~~6. Print/log resource status and cleanup actions for verification.~~
~~7. Run integration tests and main app, monitor for leaks or warnings.~~

--------------------------------------------------------------------------------------------

# Immediate Changes: Iteration 1, Step 4

## ~~Document the data schema and config options~~

### ~~Sub-steps:~~
~~1. Review all database tables and their fields (health_logs, user_settings, user_points, detailed_logs).~~
~~2. Document the schema for each table in the README (or a dedicated docs file).~~
~~3. Review all config options in app/config.py and document their purpose and usage.~~
~~4. Add a section to the README (or docs) explaining how to change config values and what each does.~~
~~5. Ensure all documentation is clear, up-to-date, and helpful for new contributors/users.~~
~~6. Run integration tests to confirm nothing is broken after doc changes.~~

--------------------------------------------------------------------------------------------

# Immediate Changes: Iteration 1, Step 4.5

## Audit and align collected data with expected/needed data

### Sub-steps:
1. Clear the current database and logs to start fresh.
2. Run main3.py and interact with the app to generate new data.
3. Review what data is actually being collected and logged (fields, values, frequency, etc.).
4. Compare actual collected data with what is expected/needed for analysis, ML, and user feedback.
5. Identify and document all mismatches, missing fields, or irrelevant/noisy data.
6. Update data logging, posture detection, and event tracking to ensure all required data is collected, and only useful data is stored.
7. Test the app and confirm the new data matches expectations.
8. Update documentation and README if needed.

--------------------------------------------------------------------------------------------

# Immediate Changes: Iteration 1, Step 5

# (Next step placeholder) 

- Implement foreground app tracking (only log if app is in foreground, not just running in background)
    - Note: This feature will be generic and will NOT hardcode or filter for specific applications. It will log any app that is in the foreground by default.
    1. Create a new script: `foreground_tracker_test.py` to detect and log the current foreground window (use pygetwindow or win32gui).
    2. Test: Manually switch between apps and verify the correct app name is logged.
    3. Ask user: Is the output format okay? Which apps (if any) should be ignored?
    4. Create `foreground_tracker_logger.py` (no GUI) to log the foreground app name at intervals.
    5. Add appropriate directory (e.g., `app/trackers/`) and corresponding tests (e.g., `tests/test_foreground_tracker.py`).
    6. Once confirmed, integrate into `main3.py` with a toggle for foreground-only mode (user can choose between current and new behavior). 